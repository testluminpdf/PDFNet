#include <SDF/ObjSet.h>

    bool DownloaderUpdatePage(TRN_PDFDoc doc, TRN_UInt32 page_num, TRN_UInt32 obj_num);
    void DownloaderUpdateOutline(TRN_PDFDoc doc);
    void DownloaderUpdateThumb(TRN_PDFDoc doc, TRN_UInt32 page_num, TRN_UInt32 obj_num);
    void DownloaderFinishedDownload(TRN_PDFDoc doc);
    bool DownloaderIsCorrectDoc(TRN_PDFDoc doc);
    void DownloaderInitialized(TRN_PDFDoc doc);

    class HTTPRequestOptions
    {
    public:
        HTTPRequestOptions();
        void AddHeader(const pdftron::UString& header, const pdftron::UString& val);
        void RestrictDownloadUsage(bool restrict);
        void SkipByteRangeTest(bool skip);
        void UseRemoteFileSize(Int64 size_in_bytes);

    protected:
        TRN_Obj m_obj;
        friend class PDF::PDFView;
        SDF::ObjSet m_objset;
    };

    void OpenURLAsync(const char* url, UString cache_file, const char* password, const HTTPRequestOptions* options = 0);
	
    //typedef void (*DownloadProc) (DownloadContainer* cont, size_t offset, size_t size, void* user_data);
    //virtual bool InitDownload(size_t file_size, Download::DownloadProc proc, void* data, const char* password = 0);
    void SetRightToLeftLanguage(bool flag);
    void SetPageBox(Page::Box region);
    Page::Box GetPageBox() const;
    //bool IsFinishedRendering(bool visible_region_only) const;
    void PushViewingStates();
    void PopViewingStates(bool restore);
    void SetFreezeTile(bool freeze);
    int GetCurCanvasId() const;
    void GetPageRects(const Rect& rect, std::vector<double>& page_rects_info) const;
    void GetPageRectsOnCanvas(std::vector<double>& page_rects_info, int canvasNumber) const;
    double GetRefZoomForPage(PageViewMode viewMode, int pageNum) const;
    void DoProgressiveRender();
    int GetCellSideLength() const;
    double GetPageVGap() const;
    double GetPageHGap() const;
    void RequestRender();
    void PurgeMemory();
    void SetMemInfo(double total_mem, double mem_cap);

    enum AnnotBitmapFlags
    {
        e_normal_annot_bitmap = 1,
        e_mult_blend_annot_bitmap = 2,
        e_normal_annot_vector = 3,
        e_mult_blend_annot_vector = 4,
        e_resize_annot_bitmap = 128,
        e_remove_annot_bitmap = 129,
        e_clear_all_annot_bitmaps = 130,
        e_annot_renders_complete = 131
    };

    enum AnnotVectorMode
    {
        e_no_vector_annots,
        e_pdftron_vector_annots
    };
    
    typedef void(*AnnotBitmapProc)(void* self, int operation_type,
        char* buffer, UInt32 width, UInt32 height, UInt32 stride,
        UInt32 page_num, UInt32 annot_index, const void* annot_key,
        Int64 x_in_page, Int64 y_in_page, int x_offset, int y_offset,
        int remaining_tiles, int sequence_number,
        Int64 x_page_size, Int64 y_page_size);

    typedef void (*DeluxeCreateTileProc)( void* self,
        char* buffer, UInt32 width, UInt32 height, UInt32 stride, 
        UInt32 page_num, UInt64 x_page_loc, UInt64 y_page_loc,
        UInt32 zoomed_page_width, UInt32 zoomed_page_height, 
        UInt32 tile_id, UInt32 x_in_page, UInt32 y_in_page,
        int canvas_id, int remaining_tiles, int tile_type, 
        int sequence_number);
    


    typedef void (*CreateTileProc)(
       void* customData,
       char* buffer, int originX, int originY, int width, int height,
       int pageNum, Int64 cellNumber,
       bool finalRender, bool predictionRender,
       int tilesRemaining, bool firstTile,
       int canvasWidth, int canvasHeight, int cellSideLength, int cellPerRow, int cellPerCol,
       int thumbnailId
    );
    typedef void (*RemoveTileProc)(void* customData, int canvasNumber, Int64 cellNumber, int thumbnailId, int sequenceNumber);
    typedef void (*PartDownloadedProc)(DownloadedType dlType, TRN_PDFDoc doc, UInt32 pageNum, UInt32 objNum, const char* message, void* customData);

#ifdef SWIG
    void SetWrapperAnnotBitmapProc(Callback* instance, AnnotVectorMode mode);
    void SetWrapperCreateTileProc(Callback* instance);
    void SetWrapperDeluxeCreateTileProc(Callback* instance);
    void SetWrapperRemoveTileProc(Callback* instance);
    void SetPartDownloadedProc(Callback* instance);
#else
    void SetWrapperAnnotBitmapProc(AnnotBitmapProc wrapperAnnotProc, void* callingObject, AnnotVectorMode mode);
    void SetWrapperCreateTileProc(CreateTileProc wrapperCreateTileProc, void* callingObject);
    void SetWrapperDeluxeCreateTileProc(DeluxeCreateTileProc wrapperDeluxeCreateTileProc, void* callingObject);
    void SetWrapperRemoveTileProc(RemoveTileProc wrapperRemoveTileProc, void* callingObject);
    void SetPartDownloadedProc(PartDownloadedProc partDownloadedProc, void* customData);
#endif

